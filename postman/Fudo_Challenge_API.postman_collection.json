{
	"info": {
		"_postman_id": "fudo-challenge-api-collection",
		"name": "Fudo Challenge API",
		"description": "Colección completa para probar la API del Fudo Challenge con Ruby Rack\n\n## Cómo usar esta colección:\n\n1. **Importar en Postman**: File > Import > arrastra este archivo\n2. **Configurar variables**: Edita las variables de entorno\n3. **Ejecutar en orden**: Los requests están ordenados para flujo completo\n4. **Tests automáticos**: Cada request incluye tests de validación\n\n## Variables requeridas:\n- `base_url`: http://localhost:9292\n- `session_id`: Se auto-genera al autenticarse\n- `job_id`: Se auto-genera al crear productos\n\n## Flujo de pruebas:\n1. Health Check\n2. Autenticación\n3. Crear productos (asíncrono)\n4. Verificar estado de jobs\n5. Listar productos\n6. Archivos estáticos\n\n**Autor**: Ignacio González Orellana\n**Versión**: 1.0.0",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Health Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is JSON\", function () {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Health check structure is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('status', 'healthy');",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('version');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});",
							"",
							"pm.test(\"Response time is acceptable\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/health",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"health"
					]
				},
				"description": "Verifica que la API esté funcionando correctamente. Este endpoint no requiere autenticación y retorna información sobre el estado del sistema."
			},
			"response": []
		},
		{
			"name": "2. Authentication - Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Authentication successful\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('session_id');",
							"    pm.expect(jsonData.session_id).to.be.a('string');",
							"    pm.expect(jsonData.session_id.length).to.be.greaterThan(0);",
							"    ",
							"    // Guardar session_id para usar en otros requests",
							"    pm.collectionVariables.set('session_id', jsonData.session_id);",
							"});",
							"",
							"pm.test(\"Response includes expiration time\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('expires_at');",
							"});",
							"",
							"pm.test(\"Session ID format is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    // Session ID debe ser un hex string de 64 caracteres",
							"    pm.expect(jsonData.session_id).to.match(/^[a-f0-9]{64}$/);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"password\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				},
				"description": "Autentica un usuario con credenciales válidas y obtiene un session_id para usar en requests posteriores.\n\n**Credenciales de prueba:**\n- Username: admin\n- Password: password"
			},
			"response": []
		},
		{
			"name": "2b. Authentication - Invalid Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Authentication failed correctly\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', false);",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.include('credentials');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"wrong\",\n  \"password\": \"wrong\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				},
				"description": "Prueba el manejo de credenciales inválidas. Debe retornar un error 401."
			},
			"response": []
		},
		{
			"name": "3. Create Product (Async) - Valid",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202 (Accepted)\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Product creation initiated\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.include('creation initiated');",
							"    pm.expect(jsonData).to.have.property('job_id');",
							"    pm.expect(jsonData).to.have.property('status', 'pending');",
							"    pm.expect(jsonData).to.have.property('estimated_completion');",
							"    ",
							"    // Guardar job_id para verificar después",
							"    pm.collectionVariables.set('job_id', jsonData.job_id);",
							"});",
							"",
							"pm.test(\"Job ID format is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.job_id).to.be.a('string');",
							"    pm.expect(jsonData.job_id.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Estimated completion is in the future\", function () {",
							"    const jsonData = pm.response.json();",
							"    const estimatedTime = new Date(jsonData.estimated_completion);",
							"    const now = new Date();",
							"    pm.expect(estimatedTime.getTime()).to.be.greaterThan(now.getTime());",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Producto de Prueba Postman\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				},
				"description": "Crea un producto de forma asíncrona. El producto estará disponible después de 5 segundos.\n\n**Requiere autenticación**: Usar el session_id obtenido en el login."
			},
			"response": []
		},
		{
			"name": "3b. Create Product - No Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401 (Unauthorized)\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"Unauthorized error message\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.include('session');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Producto Sin Auth\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				},
				"description": "Intenta crear un producto sin autenticación. Debe fallar con error 401."
			},
			"response": []
		},
		{
			"name": "4. Check Job Status - Pending",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Job status response structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('job');",
							"    pm.expect(jsonData.job).to.have.property('id');",
							"    pm.expect(jsonData.job).to.have.property('status');",
							"    pm.expect(jsonData.job).to.have.property('product_name');",
							"});",
							"",
							"pm.test(\"Job status is valid\", function () {",
							"    const jsonData = pm.response.json();",
							"    const validStatuses = ['pending', 'processing', 'completed', 'failed'];",
							"    pm.expect(validStatuses).to.include(jsonData.job.status);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/products/status?job_id={{job_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"status"
					],
					"query": [
						{
							"key": "job_id",
							"value": "{{job_id}}"
						}
					]
				},
				"description": "Verifica el estado de un job de creación de producto. Inmediatamente después de crear el producto debería estar 'pending' o 'processing'."
			},
			"response": []
		},
		{
			"name": "5. Wait and Check Job Status - Completed",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Esperar 6 segundos para que el producto se complete",
							"setTimeout(function(){}, 6000);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Job is completed\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.job.status).to.equal('completed');",
							"    pm.expect(jsonData.job).to.have.property('product_id');",
							"    pm.expect(jsonData.job.product_id).to.be.a('number');",
							"    ",
							"    // Guardar product_id para usar después",
							"    pm.collectionVariables.set('product_id', jsonData.job.product_id);",
							"});",
							"",
							"pm.test(\"Product was created successfully\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.job.product_name).to.equal('Producto de Prueba Postman');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/products/status?job_id={{job_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"status"
					],
					"query": [
						{
							"key": "job_id",
							"value": "{{job_id}}"
						}
					]
				},
				"description": "Verifica el estado del job después de esperar 6 segundos. El producto debería estar completado."
			},
			"response": []
		},
		{
			"name": "6. List All Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Products list structure\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('products');",
							"    pm.expect(jsonData).to.have.property('total');",
							"    pm.expect(jsonData.products).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Products contain our created product\", function () {",
							"    const jsonData = pm.response.json();",
							"    const ourProduct = jsonData.products.find(p => p.name === 'Producto de Prueba Postman');",
							"    pm.expect(ourProduct).to.not.be.undefined;",
							"    pm.expect(ourProduct).to.have.property('id');",
							"    pm.expect(ourProduct).to.have.property('created_at');",
							"});",
							"",
							"pm.test(\"Total count matches array length\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.total).to.equal(jsonData.products.length);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				},
				"description": "Lista todos los productos creados. Debe incluir el producto que acabamos de crear."
			},
			"response": []
		},
		{
			"name": "7. Get Specific Product",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Product details are correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('product');",
							"    pm.expect(jsonData.product).to.have.property('id');",
							"    pm.expect(jsonData.product).to.have.property('name');",
							"    pm.expect(jsonData.product).to.have.property('created_at');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/products/{{product_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"{{product_id}}"
					]
				},
				"description": "Obtiene los detalles de un producto específico por su ID."
			},
			"response": []
		},
		{
			"name": "8. Get System Stats",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Stats structure is correct\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('stats');",
							"    pm.expect(jsonData.stats).to.have.property('total_products');",
							"    pm.expect(jsonData.stats).to.have.property('pending_jobs');",
							"    pm.expect(jsonData.stats).to.have.property('completed_jobs');",
							"    pm.expect(jsonData.stats).to.have.property('failed_jobs');",
							"});",
							"",
							"pm.test(\"Stats values are numbers\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData.stats.total_products).to.be.a('number');",
							"    pm.expect(jsonData.stats.pending_jobs).to.be.a('number');",
							"    pm.expect(jsonData.stats.completed_jobs).to.be.a('number');",
							"    pm.expect(jsonData.stats.failed_jobs).to.be.a('number');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/products/stats",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"stats"
					]
				},
				"description": "Obtiene estadísticas del sistema incluyendo contadores de productos y jobs."
			},
			"response": []
		},
		{
			"name": "9. OpenAPI Specification",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is YAML\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('yaml');",
							"});",
							"",
							"pm.test(\"No-cache headers are set\", function () {",
							"    const cacheControl = pm.response.headers.get('Cache-Control');",
							"    pm.expect(cacheControl).to.include('no-cache');",
							"    pm.expect(cacheControl).to.include('no-store');",
							"    pm.expect(cacheControl).to.include('must-revalidate');",
							"});",
							"",
							"pm.test(\"Response contains OpenAPI content\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText).to.include('openapi:');",
							"    pm.expect(responseText).to.include('info:');",
							"    pm.expect(responseText).to.include('paths:');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/openapi.yaml",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"openapi.yaml"
					]
				},
				"description": "Obtiene la especificación OpenAPI completa. Verifica que no se cachee y que contenga la documentación correcta."
			},
			"response": []
		},
		{
			"name": "10. AUTHORS File",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is text/plain\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('text/plain');",
							"});",
							"",
							"pm.test(\"24-hour cache headers are set\", function () {",
							"    const cacheControl = pm.response.headers.get('Cache-Control');",
							"    pm.expect(cacheControl).to.include('public');",
							"    pm.expect(cacheControl).to.include('max-age=86400');",
							"});",
							"",
							"pm.test(\"Contains author name\", function () {",
							"    const responseText = pm.response.text();",
							"    pm.expect(responseText).to.include('Ignacio González Orellana');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/AUTHORS",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"AUTHORS"
					]
				},
				"description": "Obtiene el archivo AUTHORS. Verifica que se cachee por 24 horas y contenga la información del autor."
			},
			"response": []
		},
		{
			"name": "11. Create Multiple Products",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 202\", function () {",
							"    pm.response.to.have.status(202);",
							"});",
							"",
							"pm.test(\"Second product creation initiated\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('job_id');",
							"    pm.expect(jsonData.job_id).to.not.equal(pm.collectionVariables.get('job_id'));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"name\": \"Segundo Producto Test\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				},
				"description": "Crea un segundo producto para probar la concurrencia y múltiples jobs."
			},
			"response": []
		},
		{
			"name": "12. Test Gzip Compression",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response includes compression headers\", function () {",
							"    // El header 'vary: Accept-Encoding' indica que el servidor considera la compresión",
							"    const varyHeader = pm.response.headers.get('vary') || pm.response.headers.get('Vary');",
							"    if (varyHeader) {",
							"        pm.expect(varyHeader).to.include('Accept-Encoding');",
							"    }",
							"});",
							"",
							"pm.test(\"Response is valid JSON\", function () {",
							"    pm.response.to.be.json;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept-Encoding",
						"value": "gzip, deflate"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				},
				"description": "Prueba la compresión gzip enviando el header Accept-Encoding."
			},
			"response": []
		},
		{
			"name": "13. Invalid Job ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Error message for invalid job\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', false);",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.include('not found');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/products/status?job_id=invalid-job-id",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products",
						"status"
					],
					"query": [
						{
							"key": "job_id",
							"value": "invalid-job-id"
						}
					]
				},
				"description": "Prueba el manejo de errores con un job_id inválido."
			},
			"response": []
		},
		{
			"name": "14. Missing Product Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message for missing name\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', false);",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.include('required');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"description\": \"Producto sin nombre\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				},
				"description": "Prueba la validación cuando falta el campo 'name' requerido."
			},
			"response": []
		},
		{
			"name": "15. Invalid JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message for invalid JSON\", function () {",
							"    const jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('error');",
							"    pm.expect(jsonData.error).to.include('JSON');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{session_id}}"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{ invalid json }"
				},
				"url": {
					"raw": "{{base_url}}/products",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"products"
					]
				},
				"description": "Prueba el manejo de JSON malformado."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta antes de cada request",
					"// Puedes agregar lógica global aquí"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta después de cada request",
					"// Tests globales que aplican a todos los requests"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:9292",
			"type": "string"
		},
		{
			"key": "session_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "job_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "product_id",
			"value": "",
			"type": "string"
		}
	]
}
